@tailwind base;
@tailwind components;
@tailwind utilities;

/* .title {
  @apply text-5xl font-bold text-violet-500;
} */

body {
  @apply bg-gray-900 text-gray-100;
  -webkit-font-smoothing: antialiased;
}

/* CMS = Content Management System */

/* Headless CMS = traz somente o ADMIN( dados são fornecidos através de uma API REST ou GraphQL) */

/* React consome essa API do CMS*/

/* query =  buscar dados */

/* mutation = criar, alterar ou deletar dados */

/* over fetching é quando o backend retorna mais coisas que pedimos */

/* under fetching quando o nosso backend não retorna todas as informações que precisamos no front */

/* quando não tem classe criada eu coloco w-[valordesejadopx] */

/* Vimejs pro video*/

/*group-hover: quando  estiver fazendo hover no grupo inteiro o elemento vai ter o estilo que eu quero */

/* quando está usando react router não usamos o a para fazer a ancora e sim o elemento Link*/

/* quando uso uma variavel numa query ($variavel) devo fazer:
query GetLessongBySlug($slug: String) {
  lesson(where: {slug: $slug}) {
    title
    videoId
    description
    teacher {
      bio
      avatarURL
      name
    }
  }
}
 */

/* desafio 1 - passar a primeira aula se não tiver slug ou então mostrar um placeholder */

/* desafio 2 - mostrar um spinner no carregamento */

/* assets sempre dentro de src*/

/* quando usamos cms podemos cadastrar dados também*/

/* é recomendado ter um backend intermediando as requisições para não expor o cms no front end */

/* váriavel no graph cms são usadas quando o dado depende de outro dado ex: 
  name: $name
    */

/* no graphcms eu devo criar uma permissão para leitura de rascunho pra poder criar um subscriber e retornar algo dele no front*/

/* params loading é pra ter um status da requisição, se tiver true ela tá sendo feita e se for false
é porque terminou ou não foi feita */
